name: "Push Docker Image"

on:
  push:
    tags:
      - "v*"

env:
  GHCR_URL: ghcr.io
  GHCR_LIBRARY: jessenich
  GHCR_REPO: baseimage-ubuntu
  DOCKERHUB_LIBRARY: jessenich91
  DOCKERHUB_REPO: baseimage-ubuntu

jobs:
  create-build-matrix:
    name: "Create Build Matrix"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        param-file: [ "./.github/workflows/push-docker-image-params.json" ]
      fail-fast: true
    outputs:
      matrix: ${{ steps.return-matrix.outputs.MATRIX }}
    steps:
      - id: read-matrix-file
        name: Read Matrix from Parameter File
        run: |
          FILE_CONTENTS="$(cat ${{ matrix.param-file }})"
          echo "::set-output name=MATRIX::$FILE_CONTENTS"

      - id: return-matrix
        name: Return JSON Formatted Build Matrix
        run: |
          # INLINE="${{ steps.print-matrix.outputs.matrix }}"
          FILE_CONTENTS="${{ steps.read-matrix-file.outputs.matrix }}"
          if [[ -n "$INLINE" ]]; then
            echo "Found inline matrix params..."
            echo "::set-output name=MATRIX::$INLINE";
          elif [[ -n "$FILE_CONTENTS" ]]; then
            echo "Found file matrix contents"
            echo "::set-output name=MATRIX::$FILE_CONTENTS";
          else
            return -1;
          fi
          
  print-build-matrix:
    name: Print Build Matrix
    needs: create-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ needs.create-build-matrix.outputs.matrix }}
    steps:
      - name: Pretty Print Matrix
        run: echo "${{ toJSON(fromJSON(steps.set-matrix.outputs.matrix)) }}"

  build-docker-image:
    name: "Build Ubuntu - Release: ${{ matrix.release }} | Arch: ${{ matrix.arch }}"
    needs: 
      - create-build-matrix
      - print-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.create-build-matrix.outputs.matrix) }}
      fail-fast: false

    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
            version: latest
            install: true
            driver-opts: image=moby/buildkit:master
            use: true

      - name: Cache Docker layers
        uses: actions/cache@v3.0.1
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ${{ env.GHCR_URL }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v3
        env:
          release-name: "${{ matrix.release }}"
        with:
          github-token:  ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ env.LABELS }}
          images: |
            "docker.io/${{ env.DOCKERHUB_LIBRARY }}/${{ env.DOCKERHUB_REPO }}"
            "ghcr.io/${{ env.GHCR_LIBRARY }}/${{ env.GHCR_REPO }}"
          tags: |
            type=raw,enable=true,priority=100,value=latest
            type=semver,enable=true,priority=200,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,enable=true,priority=300,pattern={{major}}.{{minor}}.{{patch}}-${{ matrix.release }}

      - name: Build & Push Latest
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          labels: ${{ steps.meta.output.labels }}
          build-args: |
            REL=${{ matrix.release }}
            ARCH=${{ matrix.arch }}
            OVERLAY_ARCH=${{ maltrix.arch }}
            TZ=America/New_York
          platforms: ${{ matrix.platform }}
          pull: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
